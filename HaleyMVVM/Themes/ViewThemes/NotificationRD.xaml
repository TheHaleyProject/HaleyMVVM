<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:bc="clr-namespace:Haley.WPF.Controls"
    xmlns:beh="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:enums="clr-namespace:Haley.Enums"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Haley.MVVM;component/Dictionaries/haleyIcons.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Haley.MVVM;component/Dictionaries/haleyConverters.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <sys:Boolean x:Key="False">False</sys:Boolean>
    <sys:Boolean x:Key="True">True</sys:Boolean>

    <Style x:Key="internal_notify_flexi_button_base" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <!--<Setter Property="FontFamily" Value="Century Gothic" />-->
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>      
    </Style>

    <Style x:Key="internal_notify_flexi_button" TargetType="{x:Type Button}" BasedOn="{StaticResource internal_notify_flexi_button_base}">
        <Setter Property="Background" Value="#FFF1F1F1"/>
        <Setter Property="Width" Value="90"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="brderButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4">
                            <Border.Effect>
                                <DropShadowEffect Color="Gray" ShadowDepth="0" BlurRadius="1" />
                            </Border.Effect>
                        </Border>
                        <Border Background="{TemplateBinding Background}" CornerRadius="4">
                            <Border.OpacityMask>
                                <VisualBrush Visual="{Binding ElementName=brderButton}"/>
                            </Border.OpacityMask>
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect" TargetName="brderButton">
                                <Setter.Value>
                                    <DropShadowEffect Color="#FF22C3D3" ShadowDepth="0" BlurRadius="4" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <DataTemplate x:Key="internal_notify_header_template">
        <Border Grid.Row="0" CornerRadius="8,8,0,0"  Background="Transparent">
            <Grid x:Name="grdHeader">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="35"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" x:Name="PART_header" Background="Transparent" IsHitTestVisible="True">
                    <beh:Interaction.Triggers>
                        <beh:EventTrigger EventName="MouseLeftButtonDown" >
                            <beh:InvokeCommandAction Command="{x:Static ComponentCommands.MoveDown}"/>
                        </beh:EventTrigger>
                    </beh:Interaction.Triggers>
                    <TextBlock  Text="{Binding Title,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Foreground="{Binding AccentForeground,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" HorizontalAlignment="Left" VerticalAlignment="Center"  FontSize="12" FontFamily="Century Gothic" Margin="10,0"/>
                </Grid>
                <Button Grid.Column="1" Style="{StaticResource internal_notify_flexi_button_base}" Content="X" FontSize="15" FontStretch="ExtraExpanded" FontWeight="Bold" Foreground="{Binding AccentForeground,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Width="{Binding ElementName=grdHeader, Path=ActualHeight}" CommandParameter="{StaticResource False}" Command="{x:Static ApplicationCommands.Close}" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="internal_notification_content">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Image Margin="5" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding ShowNotificationIcon,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}},Converter={StaticResource BooltoVisibiliy}}">
                <Image.Style>
                    <Style TargetType="{x:Type Image}">
                        <Setter Property="Source" Value="{StaticResource notify_info_medium}"/>
                        <Style.Triggers>
                            <!--Success-->
                            <DataTrigger Binding="{Binding NotificationIcon,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:NotificationIcon.Success}">
                                <Setter Property="Source" Value="{StaticResource notify_success_medium}"/>
                            </DataTrigger>
                            <!--Warning-->
                            <DataTrigger Binding="{Binding NotificationIcon,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:NotificationIcon.Warning}">
                                <Setter Property="Source" Value="{StaticResource notify_warning_medium}"/>
                            </DataTrigger>
                            <!--Error-->
                            <DataTrigger Binding="{Binding NotificationIcon,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:NotificationIcon.Error}">
                                <Setter Property="Source" Value="{StaticResource notify_error_medium}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <TextBlock Text="{Binding Message,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1" TextWrapping="Wrap" MaxWidth="800">
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Style.Triggers>
                            <!--Success-->
                            <DataTrigger Binding="{Binding Type,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:DisplayType.ToastInfo}">
                                <Setter Property="Foreground" Value="{Binding ToastForeground,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="internal_notification_controlbox">
        <StackPanel Orientation="Horizontal" Grid.Row="1" HorizontalAlignment="Right" Margin="0,2">
            <Button Style="{StaticResource internal_notify_flexi_button}"  Margin="4,1" Content="Cancel" CommandParameter="{StaticResource False}" Command="{x:Static ApplicationCommands.Close}"/>
            <Button Style="{StaticResource internal_notify_flexi_button}"  Margin="4,1" Background="{Binding AccentColor,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Foreground="{Binding AccentForeground,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Content="ACCEPT" CommandParameter="{StaticResource True}" Command="{x:Static ApplicationCommands.Close}" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="internal_notification_showInfo">
        <ContentControl ContentTemplate="{StaticResource internal_notification_content}"/>
    </DataTemplate>

    <DataTemplate x:Key="internal_notification_confirm">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="35"/>
            </Grid.RowDefinitions>
            <ContentControl ContentTemplate="{StaticResource internal_notification_content}"/>
            <ContentControl Grid.Row="1" ContentTemplate="{StaticResource internal_notification_controlbox}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="internal_notification_getInfo">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="40"/>
                <RowDefinition Height="35"/>
            </Grid.RowDefinitions>
            <ContentControl ContentTemplate="{StaticResource internal_notification_content}"/>
            <Separator Grid.Row="1"/>
            <Grid Grid.Row="2" Margin="6" >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <TextBlock Text="Enter : " FontSize="12"/>
                <TextBox Text="{Binding UserInput,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Grid.Column="2" TextWrapping="WrapWithOverflow" Width="300"/>
            </Grid>
            <ContentControl Grid.Row="3" ContentTemplate="{StaticResource internal_notification_controlbox}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="internal_notification_containerView">
        <ContentControl Content="{Binding ContainerView,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}"/>
    </DataTemplate>

    <ControlTemplate x:Key="internal_notification_dialog" TargetType="{x:Type bc:Notification}">
        <Border x:Name="brdrMain" CornerRadius="10"  Height="Auto" Margin="10" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding AccentColor}">
            <Border.Effect>
                <DropShadowEffect ShadowDepth="0" BlurRadius="{Binding GlowRadius,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Color="{Binding GlowColor,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}"/>
            </Border.Effect>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="27"/>
                    <RowDefinition Height="Auto" MinHeight="100"/>
                </Grid.RowDefinitions>

                <!--HEADER-->
                <ContentControl Grid.Row="0" ContentTemplate="{StaticResource internal_notify_header_template}"/>

                <!--ACTUAL CONTENT-->
                <Border Grid.Row="1" CornerRadius="0,0,9,9" Background="{TemplateBinding Background}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MinHeight="100"/>
                            <RowDefinition Height="8"/>
                        </Grid.RowDefinitions>
                        <ContentControl Margin="5">
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Type,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:DisplayType.ContainerView}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource internal_notification_containerView}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Type,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:DisplayType.ShowInfo}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource internal_notification_showInfo}"/>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding Type,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:DisplayType.GetConfirmation}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource internal_notification_confirm}"/>
                                        </DataTrigger>

                                        <DataTrigger Binding="{Binding Type,RelativeSource={RelativeSource AncestorType={x:Type bc:Notification}}}" Value="{x:Static enums:DisplayType.GetInput}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource internal_notification_getInfo}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </Grid>
                </Border>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="internal_notification_toast" TargetType="{x:Type bc:Notification}">
        <Border x:Name="brdrMain" Height="Auto" Margin="5" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding ToastBackground}" MaxWidth="400" MaxHeight="300">
            <Border.Effect>
                <DropShadowEffect Color="White" ShadowDepth="0" BlurRadius="5" />
            </Border.Effect>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition x:Name="rowdefmain" Height="25"/>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="100"/>
                    <RowDefinition Height="25"/>
                </Grid.RowDefinitions>

                <Grid Background="{TemplateBinding AccentColor}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="25"/>
                    </Grid.ColumnDefinitions>
                    <!--Application Name-->
                    <Grid>
                        <TextBlock Text="{TemplateBinding AppName}" Foreground="{TemplateBinding AccentForeground}" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="13" FontFamily="Century Gothic" Margin="15,0"/>
                    </Grid>
                    <!--CLOSE BUTTON-->
                    <Button Grid.Column="1" Style="{StaticResource internal_notify_flexi_button}" Background="Transparent" Content="X" FontSize="15" FontStretch="ExtraExpanded" FontWeight="Bold" Foreground="{TemplateBinding AccentForeground}"  CommandParameter="{StaticResource False}" Command="{x:Static ApplicationCommands.Close}"  BorderThickness="0" BorderBrush="Transparent" Width="25"/>
                </Grid>
                
                <!--Message Title-->
                <TextBlock Grid.Row="1"  Text="{TemplateBinding Title}" Foreground="{TemplateBinding ToastForeground}" HorizontalAlignment="Left" VerticalAlignment="Center"  FontSize="12" FontFamily="Century Gothic" Margin="5"/>
                
                <!--ACTUAL CONTENT-->
                <ContentControl Margin="5" Grid.Row="2" VerticalAlignment="Top" ContentTemplate="{StaticResource internal_notification_showInfo}"/>
                
                
                <!--AutoClose-->
                <WrapPanel Grid.Row="3" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="3" Visibility="{TemplateBinding AutoClose,Converter={StaticResource BooltoVisibiliy}}">
                    <WrapPanel.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter  Property="FontSize" Value="10"/>
                            <Setter Property="Foreground" Value="{Binding Path=ToastForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Style>
                    </WrapPanel.Resources>
                    <TextBlock Text="Auto close in "/>
                    <TextBlock Text="{Binding Path=CountDown, RelativeSource={RelativeSource TemplatedParent},NotifyOnSourceUpdated=True,UpdateSourceTrigger=PropertyChanged}" FontWeight="Bold" />
                    <TextBlock Text=" sec."/>
                </WrapPanel>
               
                <!--Close All toasts-->
                <TextBlock Grid.Row="3" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="3">           
                    <Hyperlink CommandParameter="{StaticResource False}" Command="{x:Static SystemCommands.CloseWindowCommand}" Foreground="{TemplateBinding ToastForeground}" TextDecorations="Underline" FontSize="9">
                        Close All
                    </Hyperlink>
                </TextBlock>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style TargetType="{x:Type bc:Notification}">
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Background" Value="#FFEEEEEE"/>
        <Setter Property="BorderBrush" Value="#FF7E7777"/>
        <Setter Property="ShowActivated" Value="False"/>
        <Setter Property="ShowInTaskbar" Value="False"/>
        <Setter Property="Topmost" Value="True"/>
        <Setter Property="MinWidth" Value="350"/>
        <Setter Property="Template" Value="{StaticResource internal_notification_dialog}"/>
        <Style.Triggers>
            <Trigger Property="Type" Value="ToastInfo">
                <Setter Property="Template" Value="{StaticResource internal_notification_toast}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
